# TELEGRAM-–ë–û–¢

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import sqlite3 as sl;
import telebot, telebot.types as types;
from docxtpl import DocxTemplate;
from io import BytesIO;
from datetime import datetime as dt;

# –¢–ï–ö–°–¢–û–í–´–ï –®–ê–ë–õ–û–ù–´
building_text = r'''f"""
üè£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–¥–∞–Ω–∏–∏:

üÜî –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {x[0]}
üó∫ –ê–¥—Ä–µ—Å: {x[1]}
üèô –†–∞–π–æ–Ω: {x[2]}
üö© –ü–ª–æ—â–∞–¥—å –∑–µ–º–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞: {x[3]} –º¬≤
üèó –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {x[4]}
üß± –ú–∞—Ç–µ—Ä–∏–∞–ª: {x[5]}
üî≤ –ú–∞—Ç–µ—Ä–∏–∞–ª —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞: {x[6]}
‚ûñ –ò–∑–Ω–æ—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö: {x[8]}%
üõ£ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞: {x[10]} –º
‚≠êÔ∏è –ü–ª–æ—â–∞–¥—å –Ω–µ–∂–∏–ª–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è: {x[11]} –º¬≤
üîº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π: {x[9]}
üö™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä: {x[13]}
‚ÜïÔ∏è –õ–∏—Ñ—Ç: p

üóí –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
{x[7]}
"""''';

new_flat = '''
–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã:
1. –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
2. –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã
3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
4. –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã
5. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã
6. –ü–ª–æ—â–∞–¥—å –±–∞–ª–∫–æ–Ω–∞
7. –í—ã—Å–æ—Ç–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
'''

new_building = '''
–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–¥–∞–Ω–∏—è:
1. –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä
2. –ê–¥—Ä–µ—Å
3. –†–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞
4. –ü–ª–æ—â–∞–¥—å –∑–µ–º–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞
5. –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–∞–Ω–∏—è
6. –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –∑–¥–∞–Ω–∏—è
7. –ú–∞—Ç–µ—Ä–∏–∞–ª —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞
8. –ò–∑–Ω–æ—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
9. –ß–∏—Å–ª–æ —ç—Ç–∞–∂–µ–π –≤ –∑–¥–∞–Ω–∏–∏
10. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞
11. –ü–ª–æ—â–∞–¥—å –Ω–µ–∂–∏–ª—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π
12. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –∑–¥–∞–Ω–∏–∏
13. –ù–∞–ª–∏—á–∏–µ –ª–∏—Ñ—Ç–∞
'''

flatsql = '''
SELECT BUILDINGS.Kadastr, BUILDINGS.Address, Storey, Flat, Rooms, Squareflat, Dwell, Branch, Balcony, Height, Fid
FROM FLATS, BUILDINGS WHERE Flat = ? AND Fid IN (SELECT Fid FROM RECORDS WHERE Kadastr IN (SELECT Kadastr FROM USERS WHERE Id = ?))
''';

flat_text = r'''f"""
üè£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–¥–∞–Ω–∏–∏:

üÜî –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {x[0]}
üó∫ –ê–¥—Ä–µ—Å: {x[1]}
üîº –≠—Ç–∞–∂: {x[2]}
üö™ –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: {x[3]}
üõå –ß–∏—Å–ª–æ –∫–æ–º–Ω–∞—Ç: {x[4]}
üî≤ –ü–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã: {x[5]} –º¬≤
‚ù§Ô∏è –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å: {x[6]} –º¬≤
‚≠êÔ∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å: {x[7]} –º¬≤
ü™ü –ü–ª–æ—â–∞–¥—å –±–∞–ª–∫–æ–Ω–∞: {x[8]} –º¬≤
‚úàÔ∏è –í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–∞: {x[9]} –º
"""''';

def get_button(x):
    return types.ReplyKeyboardMarkup(row_width = x, resize_keyboard = True);

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —à–∞–≥–∞
def next_step(user_id, step):
    db.execute('UPDATE USERS SET Step = ? WHERE Id = ?', (step, user_id, ));
    db.commit();

db = sl.connect('database_pr.db', check_same_thread = False);
bot = telebot.TeleBot('5364881295:AAF9JCR0Ci3FoIVEnDFzatqebNE83xWVPvE');

# –ö–ù–û–ü–ö–ò TELEGRAM
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
mainmenu = get_button(2).add('üîç –ü–æ–∏—Å–∫', '‚ûï –ù–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ'); # üè° –ñ–∏–ª—ã–µ –∑–¥–∞–Ω–∏—è

# –ö–æ–≥–¥–∞ –∑–¥–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
buildingmenu = get_button(2).add('üè† –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
    '‚ûï –ù–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞', 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'üö™ –í—ã—Ö–æ–¥'); # üîç –ü–æ–∏—Å–∫
editbuildingmenu = get_button(3).add('üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞', 'üóí –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ', 'üö™ –í—ã—Ö–æ–¥'); # üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

# –ö–æ–≥–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ —É–∂–µ –Ω–∞–π–¥–µ–Ω–∞
flatmenu = get_button(2).add('üë®‚Äçüíº –í–ª–∞–¥–µ–ª—å—Ü—ã', 'üö™ –í—ã—Ö–æ–¥'); # üè† –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä—ã

# –ò–∑–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
editownersmenu = get_button(3).add('üë®‚Äçüíº –ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü', 'üîÄ –°–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª—é',
    'üìÑ –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', 'üìî –ò—Å—Ç–æ—Ä–∏—è', '‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞', 'üö™ –í—ã—Ö–æ–¥'); # üë®‚Äçüíº –í–ª–∞–¥–µ–ª—å—Ü—ã

# –ö–æ–≥–¥–∞ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ/–∫–≤–∞—Ä—Ç–∏—Ä—É/–≤–ª–∞–¥–µ–ª—å—Ü–∞
newobjectmenu = get_button(1).add('üö™ –í—ã—Ö–æ–¥');

# –ë–û–¢
@bot.message_handler(content_types=['text', 'document', 'audio', 'photo'])
def get_text_messages(message):
    if message.text == '/start':
        bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup = mainmenu);
        try:
            db.execute('INSERT INTO USERS VALUES(?, 1, "")', (message.from_user.id, ));
            bot.send_message(message.from_user.id, reply_markup = mainmenu);
        except:
            pass;

    step = db.execute('SELECT Step FROM USERS WHERE Id = ?', (message.from_user.id, )).fetchall()[0][0];

    if message.text == 'üö™ –í—ã—Ö–æ–¥':
        bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = mainmenu);
        next_step(message.from_user.id, 1);

    elif message.text == 'üîç –ü–æ–∏—Å–∫' and step == 1:
        text = '–í–≤–µ–¥–∏—Ç–µ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä, –≤–∑—è–≤ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.\n\n'
        for i in db.execute('SELECT Kadastr, Address FROM BUILDINGS'):
            text += f'{i[0]}: {i[1]}\n';
        bot.send_message(message.from_user.id, text, reply_markup = newobjectmenu);
        next_step(message.from_user.id, 2);
    
    # –ü–û–ò–°–ö –ü–û –ö–ê–î–ê–°–¢–†–û–í–û–ú–£ –ù–û–ú–ï–†–£
    elif step == 2:
        x = db.execute('SELECT * FROM BUILDINGS WHERE Kadastr = ?', (message.text, )).fetchall();
        if x == []:
            bot.send_message(message.from_user.id, 'üö´ –û—à–∏–±–∫–∞: –∑–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ.');
        else:
            x = x[0];
            text = building_text.replace('p', '–ù–µ—Ç') if x[14] == 0 else building_text.replace('p', '–î–∞');
            bot.send_photo(message.from_user.id, x[12], eval(text), reply_markup = buildingmenu);
            db.execute('UPDATE USERS SET Kadastr = ? WHERE Id = ?', (message.text, message.from_user.id, ));
            next_step(message.from_user.id, 3);

    # –ö–í–ê–†–¢–ò–†–´
    elif message.text == 'üè† –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä—ã' and step == 3:
        kad = db.execute('SELECT Kadastr FROM USERS WHERE Id = ?', (message.from_user.id, )).fetchall()[0][0];
        text = '–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã: ';
        sql_ = db.execute('SELECT Flat FROM FLATS WHERE Fid IN (SELECT Fid FROM RECORDS WHERE Kadastr = ?) GROUP BY Flat', (kad, )).fetchall();
        if len(sql_) != 0:
            for i in sql_:
                text += f'{i[0]}, ';
        if text == '–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã: ':
            bot.send_message(message.from_user.id, '–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É');
        else:
            bot.send_message(message.from_user.id, text[:-2], reply_markup = newobjectmenu);
            next_step(message.from_user.id, 4);

    elif step == 4:
        try:
            x = db.execute(flatsql, (message.text, message.from_user.id, )).fetchall();
            if x == []:
                bot.send_message(message.from_user.id, 'üö´ –û—à–∏–±–∫–∞: –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.');
            else:
                x = x[0];
                bot.send_message(message.from_user.id, eval(flat_text), reply_markup = flatmenu);
                db.execute('UPDATE USERS SET Fid = ? WHERE Id = ?', (x[-1], message.from_user.id, ));
                next_step(message.from_user.id, 5);
        except Exception as e:
            print(e);
    
    # –í–õ–ê–î–ï–õ–¨–¶–´
    elif message.text == 'üë®‚Äçüíº –í–ª–∞–¥–µ–ª—å—Ü—ã' and step == 5:
        text = '–°–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:\n\n';
        c = 1;
        for i in db.execute('SELECT * FROM HOSTS WHERE Passport IN (SELECT Passport FROM RECORDS WHERE Fid IN (SELECT Fid FROM USERS WHERE Id = ?) AND IsActual = 1) GROUP BY FioHost',
            (message.from_user.id, )).fetchall():
            part = db.execute('SELECT Part FROM RECORDS WHERE Passport IN (SELECT Passport FROM HOSTS WHERE HOSTS.Passport IN (SELECT Passport FROM RECORDS WHERE Fid IN (SELECT Fid FROM USERS WHERE Id = ?))) AND Passport = ? AND IsActual = 1',
                (message.from_user.id, i[1], )).fetchall()[0][0];
            text += f'{c}. {i[0]}\n–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {i[1]}\n–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {i[2]}\n–î–æ–ª—è –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {part * 100}%\n\n';
            c += 1;
        if c == 1:
            text = '–£ –∫–≤–∞—Ä—Ç–∏—Ä—ã –µ—â—ë –Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.';
        bot.send_message(message.from_user.id, text, reply_markup = editownersmenu);
    
    elif message.text == 'üë®‚Äçüíº –ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü':
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Ä–∞–∑—Ü–∞:\n\n1. –§–ò–û\n2. –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18 08 3496)\n3. –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è\n4. –î–æ–ª—è –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ (–±–µ–∑ %)\n\n–ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –≤–∞–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ:\n2. –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18 08 3496)\n4. –î–æ–ª—è –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ (–±–µ–∑ %)',
            reply_markup = newobjectmenu);
        next_step(message.from_user.id, 6);
    
    elif step == 6:
            kad, fid = db.execute('SELECT Kadastr, Fid FROM USERS WHERE Id = ?', (message.from_user.id, )).fetchall()[0];
            info = [];
            for i in message.text.split('\n'):
                info.append(i[3:]);
            if db.execute('SELECT Passport FROM RECORDS WHERE Fid IN (SELECT Fid FROM USERS WHERE Id = ?) AND Passport = ? AND IsActual = 1',
                (message.from_user.id, info[0], )).fetchall() != []:
                bot.send_message(message.from_user.id, '–£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –≤–ª–∞–¥–µ–ª–µ—Ü —É–∂–µ –≤–ª–∞–¥–µ–µ—Ç —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–æ–π. –£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.');
            elif len(info) == 2:
                x = db.execute('SELECT * FROM HOSTS WHERE Passport = ?', (info[0], )).fetchall();
                if x == []:
                    bot.send_message(message.from_user.id, '–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.');
                else:
                    x = x[0];
                    bot.send_message(message.from_user.id, f'–î–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ:\n\n{x[0]}\n{x[1]}\n{info[1]}%');
                    part = float(info[1]) / 100;
                    txt = (f"–î–æ–±–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü {x[0]} ({x[1]}) —Å –¥–æ–ª–µ–π {info[1]}%");
                    passport = info[0];
            else:
                x = db.execute('SELECT * FROM HOSTS WHERE Passport = ?', (info[1], )).fetchall();
                if x == []:
                    db.execute('INSERT INTO HOSTS VALUES (?, ?, ?)', (info[0], info[1], info[2], ));
                    db.commit();
                    bot.send_message(message.from_user.id, f'–î–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ:\n\n{info[0]}\n{info[1]}\n{info[3]}%');
                    txt = (f"–î–æ–±–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü {info[0]} ({info[1]}) —Å –¥–æ–ª–µ–π {info[3]}%");
                else:
                    x = x[0];
                    bot.send_message(message.from_user.id, f'–î–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ:\n\n{x[0]}\n{x[1]}\n{info[3]}%');
                    txt = (f"–î–æ–±–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü {x[0]} ({x[1]}) —Å –¥–æ–ª–µ–π {info[3]}%");
                part = float(info[3]) / 100;
                passport = info[1];
            
            y = db.execute('SELECT Passport FROM RECORDS WHERE Fid = ? AND IsActual = 1', (fid, )).fetchall();
            if y[0][0] == None:
                db.execute('UPDATE RECORDS SET IsActual = 0 WHERE Fid = ?', (fid, ));
                db.execute('INSERT INTO RECORDS (Kadastr, Fid, Passport, Part, IsActual, BecameHost) VALUES (?, ?, ?, 1, 1, strftime("%d.%m.%Y"))',
                    (kad, fid, passport, ));
            elif len(y) == 1:
                y = db.execute('UPDATE RECORDS SET Part = Part - ? WHERE Fid = ? AND IsActual = 1',
                    (part, fid, ));
                db.execute(f'INSERT INTO RECORDS (Kadastr, Fid, Passport, Part, IsActual, BecameHost) VALUES (?, ?, ?, ?, 1, strftime("%d.%m.%Y"))',
                    (kad, fid, passport, part, ));
            else:
                rest = 1 - part;
                db.execute('UPDATE RECORDS SET Part = Part * ? WHERE Fid = ? AND IsActual = 1', (rest, fid, ));
                db.execute(f'INSERT INTO RECORDS (Kadastr, Fid, Passport, Part, IsActual, BecameHost) VALUES (?, ?, ?, ?, 1, strftime("%d.%m.%Y"))',
                    (kad, fid, passport, part, ));
            
            bot.send_message(message.from_user.id, '–í–ª–∞–¥–µ–ª–µ—Ü —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
            # reply_markup = mainmenu
            # next_step(message.from_user.id, 1);

    elif message.text == 'üîÄ –°–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n';
        c = 1;
        for i in db.execute('SELECT * FROM HOSTS WHERE Passport IN (SELECT Passport FROM RECORDS WHERE Fid IN (SELECT Fid FROM USERS WHERE Id = ?) AND IsActual = 1) GROUP BY FioHost',
            (message.from_user.id, )).fetchall():
            part = db.execute('SELECT Part FROM RECORDS WHERE Passport IN (SELECT Passport FROM HOSTS WHERE HOSTS.Passport IN (SELECT Passport FROM RECORDS WHERE Fid IN (SELECT Fid FROM USERS WHERE Id = ?))) AND Passport = ? AND IsActual = 1',
                (message.from_user.id, i[1], )).fetchall()[0][0];
            text += f'\n{c}. {i[0]}\n–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {i[1]}\n–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {i[2]}\n–î–æ–ª—è –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {part * 100}%\n';
            c += 1;
        text += '\n–í–≤–µ–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É:\n\n1. –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞\n(2. –§–ò–û)\n3. –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞\n(4. –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è)';
        if c == 1:
            bot.send_message(message.from_user.id, '–£ –∫–≤–∞—Ä—Ç–∏—Ä—ã –µ—â—ë –Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤');
        else:
            bot.send_message(message.from_user.id, text, reply_markup = newobjectmenu);
            next_step(message.from_user.id, 9);
    
    elif step == 9:
        try:
            info = [];
            for i in message.text.split('\n'):
                info.append(i[3:]);

            kad, fid = db.execute('SELECT Kadastr, Fid FROM USERS WHERE Id = ?', (message.from_user.id, )).fetchall()[0];
            part = db.execute('SELECT Part FROM RECORDS WHERE Passport = ? AND IsActual = 1 AND Fid = ?',
                (info[0], fid, )).fetchall()[0][0];
            if len(info) == 2:
                x = db.execute('SELECT * FROM HOSTS WHERE Passport = ?', (info[0], )).fetchall();
                if x == []:
                    bot.send_message(message.from_user.id, '–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.');
                else:
                    db.execute('UPDATE RECORDS SET IsActual = 0 WHERE Passport = ? AND Fid = ?', (info[0], fid, ));
                    if db.execute('SELECT count() FROM RECORDS WHERE Passport = ? AND IsActual = 1 AND Fid = ?', (info[1], fid, )).fetchall()[0][0] != 0:
                        db.execute(f'UPDATE RECORDS SET Part = Part + ? WHERE IsActual = 1 AND Fid = ? AND Passport = ?',
                            (part, fid, info[1], ));
                    else:
                        db.execute(f'INSERT INTO RECORDS (Kadastr, Fid, Passport, Part, IsActual, BecameHost) VALUES (?, ?, ?, ?, 1, strftime("%d.%m.%Y"))',
                            (kad, fid, info[1], part, ));
            elif len(info) == 4:
                x = db.execute('SELECT * FROM HOSTS WHERE Passport = ?', (info[1], )).fetchall();
                if x == []:
                    db.execute('INSERT INTO HOSTS VALUES (?, ?, ?)', (info[1], info[2], info[3],));
                    db.commit();
                db.execute('UPDATE RECORDS SET IsActual = 0 WHERE Passport = ? AND Fid = ?', (info[0], fid, ));
                if db.execute('SELECT count() FROM RECORDS WHERE Passport = ? AND IsActual = 1 AND Fid = ?', (info[1], fid, )).fetchall()[0][0] != 0:
                    db.execute(f'UPDATE RECORDS SET Part = Part + ? WHERE IsActual = 1 AND Fid = ? AND Passport = ?',
                        (part, fid, info[2], ));
                else:
                    db.execute(f'INSERT INTO RECORDS (Kadastr, Fid, Passport, Part, IsActual, BecameHost) VALUES (?, ?, ?, ?, 1, strftime("%d.%m.%Y"))',
                        (kad, fid, info[2], part, ));

            bot.send_message(message.from_user.id, f'–í–ª–∞–¥–µ–ª–µ—Ü —Å–º–µ–Ω—ë–Ω');
        except Exception as e:
            print(e, info);
            bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞: –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');

    elif message.text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª—é':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n';
        c = 1;
        for i in db.execute('SELECT * FROM HOSTS WHERE Passport IN (SELECT Passport FROM RECORDS WHERE Fid IN (SELECT Fid FROM USERS WHERE Id = ?) AND IsActual = 1) GROUP BY FioHost',
            (message.from_user.id, )).fetchall():
            part = db.execute('SELECT Part FROM RECORDS WHERE Passport IN (SELECT Passport FROM HOSTS WHERE HOSTS.Passport IN (SELECT Passport FROM RECORDS WHERE Fid IN (SELECT Fid FROM USERS WHERE Id = ?))) AND Passport = ? AND IsActual = 1',
                (message.from_user.id, i[1], )).fetchall()[0][0];
            text += f'{c}. {i[0]}\n–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {i[1]}\n–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {i[2]}\n–î–æ–ª—è –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {part * 100}%\n\n';
            c += 1;
        text += '–í–≤–µ–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É:\n\n1. –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞\n2. –ß–∏—Å–ª–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ (–±–µ–∑ %)';
        if c == 1:
            bot.send_message(message.from_user.id, '–£ –∫–≤–∞—Ä—Ç–∏—Ä—ã –µ—â—ë –Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤');
        else:
            bot.send_message(message.from_user.id, text, reply_markup = newobjectmenu);
            next_step(message.from_user.id, 10);

    elif step == 10:
        try:
            kad, fid = db.execute('SELECT Kadastr, Fid FROM USERS WHERE Id = ?', (message.from_user.id, )).fetchall()[0];
            info = [];
            for i in message.text.split('\n'):
                info.append(i[3:]);
            part = float(info[1]) / 100;
            if db.execute('SELECT count() FROM RECORDS WHERE Fid = ? AND IsActual = 1', (fid, )).fetchall()[0][0] - 1 != 0:
                rest = ((part - db.execute('SELECT Part FROM RECORDS WHERE Fid = ? AND Passport = ? AND IsActual = 1',
                    (fid, info[0], )).fetchall()[0][0]) /
                    (db.execute('SELECT count() FROM RECORDS WHERE Fid = ? AND IsActual = 1', (fid, )).fetchall()[0][0] - 1));
                db.execute('UPDATE RECORDS SET Part = ? WHERE Passport = ? AND Fid = ? AND IsActual = 1', (part, info[0], fid, ));
                db.commit();
                db.execute('UPDATE RECORDS SET Part = Part - ? WHERE Fid = ? AND Passport != ? AND IsActual = 1',
                    (rest, fid, info[0], ));
                bot.send_message(message.from_user.id, '–î–æ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞');
            else:
                bot.send_message(message.from_user.id, '–í—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –∫–≤–∞—Ä—Ç–∏—Ä—ã');
        except:
            bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞: –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    
    elif message.text == '‚úñÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n';
        c = 1;
        for i in db.execute('SELECT * FROM HOSTS WHERE Passport IN (SELECT Passport FROM RECORDS WHERE Fid IN (SELECT Fid FROM USERS WHERE Id = ?) AND IsActual = 1) GROUP BY FioHost',
            (message.from_user.id, )).fetchall():
            part = db.execute('SELECT Part FROM RECORDS WHERE Passport IN (SELECT Passport FROM HOSTS WHERE HOSTS.Passport IN (SELECT Passport FROM RECORDS WHERE Fid IN (SELECT Fid FROM USERS WHERE Id = ?))) AND Passport = ? AND IsActual = 1',
                (message.from_user.id, i[1], )).fetchall()[0][0];
            text += f'{c}. {i[0]}\n–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {i[1]}\n–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {i[2]}\n–î–æ–ª—è –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {part * 100}%\n\n';
            c += 1;
        text += '–í–≤–µ–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É:\n\n–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞'
        if c == 1:
            bot.send_message(message.from_user.id, '–£ –∫–≤–∞—Ä—Ç–∏—Ä—ã –µ—â—ë –Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤');
        else:
            bot.send_message(message.from_user.id, text, reply_markup = newobjectmenu);
            next_step(message.from_user.id, 11);

    elif step == 11:
        try:
            kad, fid = db.execute('SELECT Kadastr, Fid FROM USERS WHERE Id = ?', (message.from_user.id, )).fetchall()[0];
            part = db.execute('SELECT Part FROM RECORDS WHERE Fid = ? AND Passport = ? AND IsActual = 1',
                (fid, message.text, )).fetchall()[0][0];
            if len(db.execute('SELECT Part FROM RECORDS WHERE Fid = ? AND Passport != ? AND IsActual = 1',
                (fid, message.text, )).fetchall()) != 0:
                info = (part /
                    (len(db.execute('SELECT Part FROM RECORDS WHERE Fid = ? AND IsActual = 1', (fid, )).fetchall()) - 1));
                db.execute('UPDATE RECORDS SET IsActual = 0 WHERE Fid = ? And IsActual = 1 AND Passport = ?',
                    (fid, message.text, ));
                db.execute('UPDATE RECORDS SET Part = Part + ? WHERE Fid = ? AND IsActual = 1',
                    (info, fid, ));
                bot.send_message(message.from_user.id, '–í–ª–∞–¥–µ–ª–µ—Ü —É–¥–∞–ª—ë–Ω');
            else:
                bot.send_message(message.from_user.id, '–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ');
        except Exception as e:
            print(e);
            bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞: –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
    
    elif message.text == 'üìî –ò—Å—Ç–æ—Ä–∏—è':
        kad, fid = db.execute('SELECT Kadastr, Fid FROM USERS WHERE Id = ?', (message.from_user.id, )).fetchall()[0];
        text = '–ü—Ä–æ—à–µ–¥—à–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏:\n';
        for i in db.execute('SELECT DISTINCT FioHost, HOSTS.Passport, Part FROM HOSTS, RECORDS WHERE HOSTS.Passport IN (SELECT Passport FROM RECORDS WHERE Fid = ? AND IsActual = 0) AND Part IN (SELECT Part FROM RECORDS WHERE Fid = ? AND IsActual = 0)',
            (fid, fid, )):
            text += f'\n{i[0]} ({i[1]}): {i[2] * 100}%';
        if text == '–ü—Ä–æ—à–µ–¥—à–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏:\n':
            bot.send_message(message.from_user.id, '–£ –∫–≤–∞—Ä—Ç–∏—Ä—ã –µ—â—ë –Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.');
        else:
            bot.send_message(message.from_user.id, text);

    elif message.text == '‚ûï –ù–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞':
        bot.send_message(message.from_user.id, new_flat, reply_markup = newobjectmenu);
        next_step(message.from_user.id, 12);

    elif step == 12:
        try:
            info = [];
            for i in message.text.split('\n'):
                info.append(i[3:]);
            kad = db.execute('SELECT Kadastr FROM USERS WHERE Id = ?', (message.from_user.id, )).fetchall()[0][0];
            mstorey, mflat = db.execute('SELECT Flow, Flats FROM BUILDINGS WHERE Kadastr = ?', (kad, )).fetchall()[0];
            if int(info[0]) <= mstorey and int(info[1]) <= mflat:
                db.execute('INSERT INTO FLATS (Storey, Flat, Rooms, Squareflat, Dwell, Branch, Balcony, Height) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                    (info[0], info[1], info[2], float(info[3]) + float(info[4]) + float(info[5]),
                        float(info[3]), float(info[4]), float(info[5]), float(info[6]), ));
                db.commit();
                fid = db.execute('SELECT Fid FROM FLATS ORDER BY Fid DESC LIMIT 1').fetchall()[0][0];
                db.execute('INSERT INTO RECORDS (Kadastr, Fid, Part, IsActual, BecameHost) VALUES (?, ?, ?, ?, strftime("%d.%m.%Y"))',
                    (kad, fid, 1, 1, ));
                db.commit();
                bot.send_message(message.from_user.id, '–ö–≤–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
            else:
                bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞: –≤—ã –≤–≤–µ–ª–∏ —ç—Ç–∞–∂ –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç—Ç–∞–∂–µ–π –∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –¥–æ–º–µ.')
        except Exception as e:
            print(e);
            bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞: –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');

    elif message.text == 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å':
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup = editbuildingmenu);
        'üóí –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ';

    elif message.text == 'üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞':
        bot.send_message(message.from_user.id, '–í—ã–∫–∏–Ω—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —á–∞—Ç –¥–ª—è —Å–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', reply_markup = newobjectmenu);
        next_step(message.from_user.id, 13);
    
    elif step == 13:
        try:
            bot.send_message(message.from_user.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ');
            kad = db.execute('SELECT Kadastr FROM USERS WHERE Id = ?', (message.from_user.id, )).fetchall()[0][0];
            db.execute('UPDATE BUILDINGS SET Picture = ? WHERE Kadastr = ?', (message.photo[0].file_id, kad, ));
        except:
            bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞: –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');

    elif message.text == 'üóí –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ':
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è', reply_markup = newobjectmenu);
        next_step(message.from_user.id, 14);
    
    elif step == 14:
        try:
            bot.send_message(message.from_user.id, '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ');
            kad = db.execute('SELECT Kadastr FROM USERS WHERE Id = ?', (message.from_user.id, )).fetchall()[0][0];
            db.execute('UPDATE BUILDINGS SET Comment = ? WHERE Kadastr = ?', (message.text, kad, ));
        except:
            bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞: –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');

    elif message.text == '‚ûï –ù–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ':
        bot.send_message(message.from_user.id, new_building, reply_markup = newobjectmenu);
        next_step(message.from_user.id, 15);

    elif step == 15:
        try:
            info = [];
            for i in message.text.split('\n'):
                if i[2] == ' ':
                    info.append(i[3:]);
                else:
                    info.append(i[4:]);

            boolean_ = 1 if info[-1] == '–î–∞' else 0; 
            db.execute('INSERT INTO BUILDINGS (Kadastr, Address, District, Land, Year, Material, Base, Wear, Flow, Line, Square, Flats, Elevator) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
                (info[0], info[1], info[2], info[3], info[4], info[5], info[6], info[7], info[8], info[9], info[10], info[11], boolean_));
            bot.send_message(message.from_user.id, '–ó–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        except:
            bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞: –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');

    elif message.text == 'üìÑ –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞:\n';
        c = 1;
        for i in db.execute('SELECT * FROM HOSTS WHERE Passport IN (SELECT Passport FROM RECORDS WHERE Fid IN (SELECT Fid FROM USERS WHERE Id = ?) AND IsActual = 1) GROUP BY FioHost',
            (message.from_user.id, )).fetchall():
            part = db.execute('SELECT Part FROM RECORDS WHERE Passport IN (SELECT Passport FROM HOSTS WHERE HOSTS.Passport IN (SELECT Passport FROM RECORDS WHERE Fid IN (SELECT Fid FROM USERS WHERE Id = ?))) AND Passport = ? AND IsActual = 1',
                (message.from_user.id, i[1], )).fetchall()[0][0];
            text += f'\n{c}. {i[0]}\n–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {i[1]}\n–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {i[2]}\n–î–æ–ª—è –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ: {part * 100}%\n';
            c += 1;
        text += '\n–í–≤–µ–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É:\n\n–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞';
        if c == 1:
            bot.send_message(message.from_user.id, '–£ –∫–≤–∞—Ä—Ç–∏—Ä—ã –µ—â—ë –Ω–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤');
        else:
            bot.send_message(message.from_user.id, text, reply_markup = newobjectmenu);
            next_step(message.from_user.id, 16);

    elif step == 16:
        try:
            kad, fid = db.execute('SELECT Kadastr, Fid FROM USERS WHERE Id = ?', (message.from_user.id, )).fetchall()[0];
            doc = DocxTemplate('tmp.docx');
            
            host = db.execute('SELECT * FROM HOSTS WHERE Passport = ?', (message.text, )).fetchall()[0];
            part = db.execute('SELECT Part FROM RECORDS WHERE Passport IN (SELECT Passport FROM HOSTS WHERE HOSTS.Passport IN (SELECT Passport FROM RECORDS WHERE Fid IN (SELECT Fid FROM USERS WHERE Id = ?))) AND Passport = ? AND IsActual = 1',
                (message.from_user.id, message.text, )).fetchall()[0][0];
            building = db.execute('SELECT * FROM BUILDINGS WHERE Kadastr = ?', (kad, )).fetchall()[0];
            flatinfo = db.execute('SELECT * FROM FLATS WHERE Fid = ?', (fid, )).fetchall()[0];
            context = {
                'fio': host[0],
                'passport': message.text,
                'address': building[1],
                'part': part * 100,
                'flat': flatinfo[2],
                'storey': flatinfo[1],
                'rooms': flatinfo[3],
                'squareflat': flatinfo[4],
                'dwell': flatinfo[5],
                'branch': flatinfo[6],
                'balcony': flatinfo[7],
                'height': flatinfo[8],
                'kad': kad,
                'district': building[2],
                'land': building[3],
                'year': building[4],
                'material': building[5],
                'base': building[6],
                'wear': building[8],
                'flow': building[9],
                'line': building[10],
                'square': building[11],
                'flats': building[13],
                'elevator': '–î–∞' if building[-1] == 1 else '–ù–µ—Ç',
                'comment': building[7],
                'date': dt.today().strftime('%d.%m.%Y')
            }
            doc.render(context);
            buffer = BytesIO();
            doc.save(buffer);
            buffer.seek(0);
            bot.send_document(message.from_user.id, buffer, caption = '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!', visible_file_name = f'{host[0]}.docx');
        except:
            bot.send_message(message.from_user.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');

    try:
        db.commit();
    except Exception as e:
        pass;

bot.polling(none_stop = True, interval = 0);